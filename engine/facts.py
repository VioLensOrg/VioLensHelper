from experta import Fact, Field
from knowledge_base.violence_types import VIOLENCE_TYPES, SEVERITY_LEVEL, REPORT_CONTACT
import streamlit as st

"""Depois separar em um arquivo para cada classe"""

class ViolenceRelact(Fact):
    """
    Representa o relato que o usu√°rio fez sobre a viol√™ncia.
    Cada campo corresponde a uma informa√ß√£o coletada no formul√°rio.
    """
    action_type = Field(str, mandatory=True)  # Tipo de comportamento/a√ß√£o
    frequency = Field(str)  # Frequ√™ncia da ocorr√™ncia
    context = Field(str)  # Contexto onde ocorreu
    target = Field(str)  # Caracter√≠stica(s) da v√≠tima
    relationship = Field(str)  # Rela√ß√£o entre agressor e v√≠tima
    impact = Field(str)  # Impacto na v√≠tima

    # Metadados para pontua√ß√£o e classifica√ß√£o
    weight = Field(int, default=0)  # Peso atribu√≠do a este relato
    confidence = Field(float, default=0.0)  # N√≠vel de confian√ßa (0.0 a 1.0)

class ViolenceClassification(Fact):
    """
    Representa o resultado da classifica√ß√£o de uma viol√™ncia.
    Ser√° criado pelo motor de infer√™ncia ao identificar um tipo de viol√™ncia.
    """
    violence_type = Field(str, mandatory=True)  # Tipo principal de viol√™ncia
    subtype = Field(str, default=None)  # Subtipo (se aplic√°vel)
    confidence_level = Field(float, default=0.0)  # N√≠vel de confian√ßa na classifica√ß√£o (0-1)
    score = Field(int, default=0)  # Pontua√ß√£o acumulada
    explanation = Field(list, default=[])  # Lista de explica√ß√µes sobre a classifica√ß√£o

class AnalysisResult(Fact):
    """
    Armazena o resultado final da an√°lise com todos os tipos de viol√™ncia 
    identificados e suas pontua√ß√µes
    """
    classifications = Field(list, default=[])  # Lista de ViolenceClassifications
    primary_result = Field(str, default=None)  # Resultado principal (maior pontua√ß√£o)
    multiple_types = Field(bool, default=False)  # Indica se foram encontrados m√∫ltiplos tipos
    ambiguity_level = Field(float, default=0.0)  # N√≠vel de ambiguidade na classifica√ß√£o

def calculate_confidence(score, threshold, max_possible_score):
    """
    Calcula o n√≠vel de confian√ßa de uma classifica√ß√£o baseado em um sistema de pontua√ß√£o.
    
    Esta fun√ß√£o implementa uma escala de confian√ßa de 0% a 100% dividida em duas faixas:
    - 0% a 50%: Para pontua√ß√µes abaixo do limiar m√≠nimo
    - 50% a 100%: Para pontua√ß√µes acima do limiar m√≠nimo
    
    Par√¢metros:
    -----------
    score : int
        Pontua√ß√£o total acumulada pelo relato baseada no sistema de pesos.
        Exemplo: Comportamento (10 pontos) + Frequ√™ncia (8 pontos) = 18 pontos
        
    threshold : int
        Limiar m√≠nimo de pontos necess√°rios para considerar que o tipo de viol√™ncia
        foi identificado. Definido no sistema de pesos para cada tipo/subtipo.
        Exemplo: Microagress√£o-Interrup√ß√µes = 15 pontos, Persegui√ß√£o = 20 pontos
        
    max_possible_score : int
        Pontua√ß√£o m√°xima te√≥rica que o tipo de viol√™ncia poderia atingir se todos
        os crit√©rios fossem atendidos, incluindo fatores agravantes.
        Exemplo: Crit√©rios obrigat√≥rios + indicativos + complementares + agravantes
    
    Retorna:
    --------
    float
        N√≠vel de confian√ßa entre 0.0 e 1.0 (0% a 100%)
    
    L√≥gica de C√°lculo:
    ------------------
    FAIXA 1 - Abaixo do Limiar (0% a 50%):
    Se a pontua√ß√£o n√£o atingiu o m√≠nimo necess√°rio, a confian√ßa √© proporcional
    ao progresso em dire√ß√£o ao limiar.
    F√≥rmula: (pontua√ß√£o_atual / limiar_m√≠nimo) √ó 0.5
    
    Exemplo: Limiar = 15, Pontua√ß√£o = 10
    Confian√ßa = (10/15) √ó 0.5 = 0.33 (33%)
    
    FAIXA 2 - Acima do Limiar (50% a 100%):
    A confian√ßa base √© 50% (por ter atingido o m√≠nimo), mais uma confian√ßa
    adicional proporcional ao quanto excede o limiar em rela√ß√£o ao m√°ximo poss√≠vel.
    
    F√≥rmula: 0.5 + ((pontos_excedentes / m√°ximo_excedente_poss√≠vel) √ó 0.5)
    
    Exemplo: Limiar = 15, Pontua√ß√£o = 22, M√°ximo = 35
    - Pontos excedentes = 22 - 15 = 7
    - M√°ximo excedente = 35 - 15 = 20
    - Confian√ßa adicional = (7/20) √ó 0.5 = 0.175
    - Confian√ßa total = 0.5 + 0.175 = 0.675 (67.5%)
    
    Interpreta√ß√£o dos Resultados:
    -----------------------------
    0% - 25%:   Evid√™ncias muito fracas, classifica√ß√£o duvidosa
    25% - 50%:  Algumas evid√™ncias, mas insuficientes para confirma√ß√£o
    50% - 60%:  Evid√™ncias m√≠nimas suficientes, baixa confian√ßa
    60% - 75%:  Evid√™ncias s√≥lidas, confian√ßa moderada
    75% - 90%:  Evid√™ncias fortes, alta confian√ßa
    90% - 100%: Evid√™ncias muito fortes, quase todas as caracter√≠sticas presentes
    
    Esta abordagem permite:
    - Gradua√ß√£o suave ao inv√©s de classifica√ß√£o bin√°ria (sim/n√£o)
    - Transpar√™ncia sobre a qualidade da identifica√ß√£o
    - Identifica√ß√£o de casos lim√≠trofes que podem precisar an√°lise adicional
    - Explica√ß√£o clara de por que o sistema chegou a determinada conclus√£o
    """
    if score < threshold:
        # Abaixo do limiar, confian√ßa proporcional ao progresso at√© o limiar
        return round((score / threshold) * 0.5, 2)
    else:
        # Acima do limiar, confian√ßa entre 0.5 e 1.0 baseada no quanto excede o limiar
        base_confidence = 0.5
        remaining_confidence = 0.5  # 0.5 para atingir 1.0 total
        
        # Quanto acima do limiar est√° a pontua√ß√£o?
        points_above_threshold = score - threshold
        max_points_above_threshold = max_possible_score - threshold
        
        # Calcular confian√ßa adicional proporcional
        if max_points_above_threshold > 0:
            additional_confidence = (points_above_threshold / max_points_above_threshold) * remaining_confidence
            return round(base_confidence + additional_confidence, 2)
        return base_confidence

def print_information(violence_type, subtype=None, confidence=None):
    """
    Apresenta informa√ß√µes sobre um tipo de viol√™ncia identificado.
    Vers√£o aprimorada que suporta subtipos e mostra n√≠vel de confian√ßa.
    """
    info = VIOLENCE_TYPES.get(violence_type)
    if not info:
        st.warning("Informa√ß√µes adicionais n√£o dispon√≠veis.")
        return

    title = violence_type.replace('_', ' ').title()
    if subtype and subtype in info.get('subtipos', {}):
        subtype_info = info['subtipos'][subtype]
        title += f" - {subtype.replace('_', ' ').title()}"
        definition = subtype_info.get('definicao', info.get('definicao', ''))
    else:
        definition = info.get('definicao', '')

    # Mostra t√≠tulo com indicador de confian√ßa se dispon√≠vel
    if confidence is not None:
        confidence_percent = int(confidence * 100)
        confidence_color = "green" if confidence_percent > 75 else "orange" if confidence_percent > 50 else "red"
        st.markdown(f"### ‚úÖ {title} <span style='color:{confidence_color}'>[Confian√ßa: {confidence_percent}%]</span>", unsafe_allow_html=True)
    else:
        st.markdown(f"### ‚úÖ {title}")
    
    st.markdown(f"**Defini√ß√£o:** {definition}")

    # Exibe gravidade
    severity = info.get('gravidade')
    if severity:
        st.markdown(f"**Gravidade:** {SEVERITY_LEVEL.get(severity, '')}")

    # Exibe canais de den√∫ncia
    contacts = info.get("canais_denuncia", [])
    if contacts:
        st.markdown("**Canais de den√∫ncia:**")
        for contact in contacts:
            contact_info = REPORT_CONTACT.get(contact)
            if contact_info:
                st.markdown(f"- **{contact}**: {contact_info.get('descricao')}")
                if "contato" in contact_info:
                    st.markdown(f"  üìß Contato: `{contact_info['contato']}`")
                st.markdown(f"  üìå Procedimento: {contact_info.get('procedimento')}")

    # Exibe recomenda√ß√µes
    recommendations = info.get("recomendacoes", [])
    if recommendations:
        st.markdown("**Recomenda√ß√µes:**")
        for r in recommendations:
            st.markdown(f"- {r}")










def print_information(violence_type):
    info = VIOLENCE_TYPES.get(violence_type)
    if not info:
        st.warning("Informa√ß√µes adicionais n√£o dispon√≠veis.")
        return

    st.markdown(f"### ‚úÖ {violence_type.replace('_', ' ').title()}")
    st.markdown(f"**Defini√ß√£o:** {info.get('definicao')}")

    severity = info.get('gravidade')
    if severity:
        st.markdown(f"**Gravidade:** {SEVERITY_LEVEL.get(severity, '')}")

    contacts = info.get("canais_denuncia", [])
    for contact in contacts:
        contact_info = REPORT_CONTACT.get(contact)
        if contact_info:
            st.markdown(f"- **{contact}**: {contact_info.get('descricao')}")
            if "contato" in contact_info:
                st.markdown(f"  üìß Contato: `{contact_info['contato']}`")
            st.markdown(f"  üìå Procedimento: {contact_info.get('procedimento')}")

    recommendations = info.get("recomendacoes", [])
    if recommendations:
        st.markdown("**Recomenda√ß√µes:**")
        for r in recommendations:
            st.markdown(f"- {r}")